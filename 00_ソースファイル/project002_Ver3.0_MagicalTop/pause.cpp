//============================================================
//
//	ポーズ処理 [pause.cpp]
//	Author：藤田勇一
//
//============================================================
//************************************************************
//	インクルードファイル
//************************************************************
#include "pause.h"
#include "renderer.h"
#include "manager.h"
#include "input.h"
#include "fade.h"
#include "texture.h"
#include "object2D.h"

//************************************************************
//	マクロ定義
//************************************************************
#define PAUSE_PRIO	(7)	// ポーズ表示の優先順位

//************************************************************
//	子クラス [CPause] のメンバ関数
//************************************************************
//============================================================
//	コンストラクタ
//============================================================
CPause::CPause()
{
	// メンバ変数をクリア
	m_pTitle = NULL;	// タイトル情報
	m_bPause = false;	// ポーズ状況
}

//============================================================
//	デストラクタ
//============================================================
CPause::~CPause()
{

}

//============================================================
//	初期化処理
//============================================================
HRESULT CPause::Init(void)
{
	// メンバ変数を初期化
	m_pTitle = NULL;	// タイトル情報
	m_bPause = false;	// ポーズ状況

	// タイトル情報の生成
	m_pTitle = CObject2D::Create(D3DXVECTOR3(100.0f, 100.0f, 0.0f), D3DXVECTOR3(100.0f, 100.0f, 0.0f));	// TODO：オブジェクト2Dの位置・大きさ
	if (UNUSED(m_pTitle))
	{ // 非使用中の場合

		// 失敗を返す
		assert(false);
		return E_FAIL;
	}

	// 優先順位を設定
	m_pTitle->SetPriority(PAUSE_PRIO);

	// 描画状況の設定
	SetEnableDraw(m_bPause);

	// 成功を返す
	return S_OK;
}

//============================================================
//	終了処理
//============================================================
void CPause::Uninit(void)
{
	// タイトル情報の終了
	m_pTitle->Uninit();
}

//============================================================
//	更新処理
//============================================================
void CPause::Update(void)
{
	if (CManager::GetFade()->GetState() == CFade::FADE_NONE)
	{ // フェードが何もしない状態の場合

		if (CManager::GetKeyboard()->GetTrigger(DIK_P) || CManager::GetPad()->GetTrigger(CInputPad::KEY_START))
		{
			// ポーズ状況を切り替え
			m_bPause = (!m_bPause) ? true : false;

			// 描画状況の設定
			SetEnableDraw(m_bPause);
		}
	}

	if (m_bPause)
	{ // ポーズ中の場合

		// TODO：ポーズによる画面遷移の作成
	}

	// タイトル情報の更新
	m_pTitle->Update();
}

//============================================================
//	描画処理
//============================================================
void CPause::Draw(void)
{

}

//============================================================
//	描画状況の設定処理
//============================================================
void CPause::SetEnableDraw(const bool bDraw)
{
	// 引数の描画状況を設定
	m_pTitle->SetEnableDraw(bDraw);	// タイトル情報
}

//============================================================
//	生成処理
//============================================================
CPause *CPause::Create(void)
{
	// ポインタを宣言
	CPause *pPause = NULL;	// ポーズ生成用

	if (UNUSED(pPause))
	{ // 使用されていない場合

		// メモリ確保
		pPause = new CPause;	// ポーズ
	}
	else { assert(false); return NULL; }	// 使用中

	if (USED(pPause))
	{ // 確保に成功している場合

		// ポーズの初期化
		if (FAILED(pPause->Init()))
		{ // 初期化に失敗した場合

			// メモリ開放
			delete pPause;
			pPause = NULL;

			// 失敗を返す
			return NULL;
		}

		// 確保したアドレスを返す
		return pPause;
	}
	else { assert(false); return NULL; }	// 確保失敗
}

//============================================================
//	破棄処理
//============================================================
HRESULT CPause::Release(CPause *&prPause)
{
	if (USED(prPause))
	{ // 使用中の場合

		// ポーズの終了
		prPause->Uninit();

		// メモリ開放
		delete prPause;
		prPause = NULL;

		// 成功を返す
		return S_OK;
	}
	else { assert(false); return E_FAIL; }	// 非使用中
}

//============================================================
//	ポーズ状況取得処理
//============================================================
bool CPause::IsPause(void)
{
	// ポーズ状況を返す
	return m_bPause;
}
