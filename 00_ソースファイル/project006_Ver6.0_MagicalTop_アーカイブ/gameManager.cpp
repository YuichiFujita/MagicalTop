//============================================================
//
//	ゲームマネージャー処理 [gameManager.cpp]
//	Author：藤田勇一
//
//============================================================
//************************************************************
//	インクルードファイル
//************************************************************
#include "gameManager.h"
#include "manager.h"

//************************************************************
//	親クラス [CGameManager] のメンバ関数
//************************************************************
//============================================================
//	コンストラクタ
//============================================================
CGameManager::CGameManager()
{
	// メンバ変数をクリア
	m_result = RESULT_NONE;	// クリア状況
	m_nScore = 0;			// 獲得スコア
	m_nTime  = 0;			// 経過タイム
}

//============================================================
//	デストラクタ
//============================================================
CGameManager::~CGameManager()
{

}

//============================================================
//	初期化処理
//============================================================
HRESULT CGameManager::Init(void)
{
	// メンバ変数を初期化
	m_result = RESULT_NONE;	// クリア状況
	m_nScore = 0;			// 獲得スコア
	m_nTime  = 0;			// 経過タイム

	// 成功を返す
	return S_OK;
}

//============================================================
//	終了処理
//============================================================
void CGameManager::Uninit(void)
{

}

//============================================================
//	更新処理
//============================================================
void CGameManager::Update(void)
{

}

//============================================================
//	生成処理
//============================================================
CGameManager *CGameManager::Create(void)
{
	// ポインタを宣言
	CGameManager *pGameManager = NULL;	// ゲームマネージャー生成用

	if (UNUSED(pGameManager))
	{ // 使用されていない場合

		// メモリ確保
		pGameManager = new CGameManager;	// ゲームマネージャー
	}
	else { assert(false); return NULL; }	// 使用中

	if (USED(pGameManager))
	{ // 使用されている場合
		
		// ゲームマネージャーの初期化
		if (FAILED(pGameManager->Init()))
		{ // 初期化に失敗した場合

			// メモリ開放
			delete pGameManager;
			pGameManager = NULL;

			// 失敗を返す
			return NULL;
		}

		// 確保したアドレスを返す
		return pGameManager;
	}
	else { assert(false); return NULL; }	// 確保失敗
}

//============================================================
//	破棄処理
//============================================================
HRESULT CGameManager::Release(CGameManager *&prGameManager)
{
	if (USED(prGameManager))
	{ // 使用中の場合

		// ゲームマネージャーの終了
		prGameManager->Uninit();

		// メモリ開放
		delete prGameManager;
		prGameManager = NULL;

		// 成功を返す
		return S_OK;
	}
	else { assert(false); return E_FAIL; }	// 非使用中
}

//============================================================
//	クリア状況の設定処理
//============================================================
void CGameManager::SetResult(const RESULT result)
{
	if (result > RESULT_NONE && result < RESULT_MAX)
	{ // リザルトが範囲内の場合

		// 引数のクリア状況を設定
		m_result = result;
	}
	else { assert(false); }	// 範囲外
}

//============================================================
//	獲得スコアの設定処理
//============================================================
void CGameManager::SetScore(const int nScore)
{
	// 引数の獲得スコアを設定
	m_nScore = nScore;
}

//============================================================
//	経過タイムの設定処理
//============================================================
void CGameManager::SetTime(const long nTime)
{
	// 引数の経過タイムを設定
	m_nTime = nTime;
}

//============================================================
//	クリア状況取得処理
//============================================================
CGameManager::RESULT CGameManager::GetResult(void) const
{
	// クリア状況を返す
	return m_result;
}

//============================================================
//	獲得スコア取得処理
//============================================================
int CGameManager::GetScore(void) const
{
	// 獲得スコアを返す
	return m_nScore;
}

//============================================================
//	経過タイム取得処理
//============================================================
long CGameManager::GetTime(void) const
{
	// 経過タイムを返す
	return m_nTime;
}
