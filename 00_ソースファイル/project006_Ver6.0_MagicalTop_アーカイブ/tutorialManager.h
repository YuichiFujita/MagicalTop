//============================================================
//
//	チュートリアルマネージャーヘッダー [tutorialManager.h]
//	Author：藤田勇一
//
//============================================================
//************************************************************
//	二重インクルード防止
//************************************************************
#ifndef _TUTORIAL_MANAGER_H_
#define _TUTORIAL_MANAGER_H_

//************************************************************
//	インクルードファイル
//************************************************************
#include "main.h"

//************************************************************
//	前方宣言
//************************************************************
class CLetterManager;	// 手紙マネージャークラス
class CObject2D;		// オブジェクト2Dクラス
class CObjectGauge2D;	// オブジェクトゲージ2Dクラス

//************************************************************
//	クラス定義
//************************************************************
// チュートリアルマネージャークラス
class CTutorialManager
{
public:
	// テクスチャ列挙
	enum TEXTURE
	{
		TEXTURE_CONTROL = 0,	// 操作方法表示のテクスチャ
		TEXTURE_START,			// 開始時の便箋テクスチャ
		TEXTURE_END,			// 終了時の便箋テクスチャ
		TEXTURE_MAX				// この列挙型の総数
	};

	// 状態列挙
	enum STATE
	{
		STATE_NONE = 0,		// 何もしない状態
		STATE_WAIT,			// 待機状態
		STATE_LETTER,		// 手紙表示状態
		STATE_FADEIN,		// フェードイン状態
		STATE_EXPLAIN,		// 説明表示状態
		STATE_FADEWAIT,		// フェード待機状態
		STATE_FADEOUT,		// フェードアウト状態
		STATE_PROGRESSION,	// 進行状態
		STATE_NEXTWAIT,		// 次レッスン待機状態
		STATE_END,			// 終了状態
		STATE_MAX			// この列挙型の総数
	};

	// レッスン列挙
	enum LESSON
	{
		LESSON_NONE = 0,	// レッスン無し
		LESSON_01,			// レッスン01：吸い込まれる
		LESSON_02,			// レッスン02：前後加速
		LESSON_03,			// レッスン03：左右加速
		LESSON_04,			// レッスン04：攻撃
		LESSON_05,			// レッスン05：マナ回復
		LESSON_06,			// レッスン06：敵への攻撃
		LESSON_MAX			// この列挙型の総数
	};

	// コンストラクタ
	CTutorialManager();

	// デストラクタ
	~CTutorialManager();

	// メンバ関数
	HRESULT Init(void);		// 初期化
	HRESULT Uninit(void);	// 終了
	void Update(void);		// 更新
	void AddLessonCounter(void);	// レッスンカウンター加算
	int GetLesson(void) const;		// レッスン取得
	STATE GetState(void) const;		// 状態取得

	// 静的メンバ関数
	static CTutorialManager *Create(void);	// 生成
	static HRESULT Release(CTutorialManager *&prTutorialManager);	// 破棄
	static int GetNextLessonCounter(const int nID);	// レッスン移行カウント取得

private:
	// メンバ関数
	void SetEnableProgressionDraw(const bool bDraw);	// 進行状態時に表示するUIの描画状況設定

	void UpdateWait(void);		// 待機
	void UpdateLetter(void);	// 手紙表示
	void UpdateFadeIn(void);	// フェードイン
	void UpdateExplain(void);	// 説明表示
	void UpdateFadeWait(void);	// フェード待機
	void UpdateFadeOut(void);	// フェードアウト
	void UpdateNextWait(void);	// 次レッスン待機
	void NextLesson(void);		// 次レッスンへの移行

	// 静的メンバ変数
	static const char *mc_apTextureFile[];			// テクスチャ定数
	static const char *mc_apLessonTextureFile[];	// レッスンテクスチャ定数
	static const char *mc_apGuideTextureFile[];		// 小説明テクスチャ定数
	static const char *mc_apControlTextureFile[];	// 操作方法テクスチャ定数
	static const int mc_aNextLesson[];				// レッスン移行カウント
	static const int mc_aNextLessonWait[];			// 次レッスン余韻カウント

	// メンバ変数
	CLetterManager *m_pLetterManager;	// 手紙マネージャーの情報
	CObjectGauge2D *m_pCounterLesson;	// レッスン管理カウンターの情報
	CObject2D *m_pFade;			// フェードの情報
	CObject2D *m_pExplain;		// 説明表示の情報
	CObject2D *m_pClose;		// 説明終了表示の情報
	CObject2D *m_pGuide;		// 小説明表示の情報
	CObject2D *m_pGuideBG;		// 小説明表示の背景情報
	CObject2D *m_pControl;		// 操作方法表示の情報
	CObject2D *m_pControlBG;	// 操作方法表示の背景情報
	STATE m_state;				// 状態
	int m_nCounterState;		// 状態管理カウンター
	int m_nLesson;				// レッスン
	float m_fScale;				// ポリゴン拡大率
	float m_fSinRot;			// ポリゴン点滅向き
};

#endif	// _TUTORIAL_MANAGER_H_
