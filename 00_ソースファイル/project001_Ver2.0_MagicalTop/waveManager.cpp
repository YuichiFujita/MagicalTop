//============================================================
//
//	ウェーブマネージャー処理 [waveManager.cpp]
//	Author：藤田勇一
//
//============================================================
//************************************************************
//	インクルードファイル
//************************************************************
#include "waveManager.h"
#include "manager.h"

//************************************************************
//	親クラス [CWaveManager] のメンバ関数
//************************************************************
//============================================================
//	コンストラクタ
//============================================================
CWaveManager::CWaveManager()
{
	// メンバ変数をクリア
	m_state = STATE_NONE;				// 状態
	m_nSeasonCounter = SEASON_SPRING;	// 季節カウンター
	m_nWaveCounter = 0;					// ウェーブカウンター
}

//============================================================
//	デストラクタ
//============================================================
CWaveManager::~CWaveManager()
{

}

//============================================================
//	初期化処理
//============================================================
HRESULT CWaveManager::Init(void)
{
	// メンバ変数を初期化
	m_state = STATE_NONE;				// 状態
	m_nSeasonCounter = SEASON_SPRING;	// 季節カウンター
	m_nWaveCounter = 0;					// ウェーブカウンター

	// 成功を返す
	return S_OK;
}

//============================================================
//	終了処理
//============================================================
void CWaveManager::Uninit(void)
{

}

//============================================================
//	更新処理
//============================================================
void CWaveManager::Update(void)
{

}

//============================================================
//	描画処理
//============================================================
void CWaveManager::Draw(void)
{

}

//============================================================
//	生成処理
//============================================================
CWaveManager *CWaveManager::Create()
{
	// ポインタを宣言
	CWaveManager *pWaveManager = NULL;	// ウェーブマネージャー生成用

	if (UNUSED(pWaveManager))
	{ // 使用されていない場合

		// メモリ確保
		pWaveManager = new CWaveManager();	// ウェーブマネージャー
	}
	else { assert(false); return NULL; }	// 使用中

	if (USED(pWaveManager))
	{ // 使用されている場合
		
		// ウェーブマネージャーの初期化
		if (FAILED(pWaveManager->Init()))
		{ // 初期化に失敗した場合

			// メモリ開放
			delete pWaveManager;
			pWaveManager = NULL;

			// 失敗を返す
			return NULL;
		}

		// 確保したアドレスを返す
		return pWaveManager;
	}
	else { assert(false); return NULL; }	// 確保失敗
}

//============================================================
//	破棄処理
//============================================================
HRESULT CWaveManager::Release(CWaveManager *&prWaveManager)
{
	if (USED(prWaveManager))
	{ // 使用中の場合

		// ウェーブマネージャーの終了
		prWaveManager->Uninit();

		// メモリ開放
		delete prWaveManager;
		prWaveManager = NULL;

		// 成功を返す
		return S_OK;
	}
	else { assert(false); return E_FAIL; }	// 非使用中
}
